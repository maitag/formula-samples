// Generated by Haxe 3.4.4
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
EReg.__name__ = true;
EReg.prototype = {
	match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,matchedRight: function() {
		if(this.r.m == null) {
			throw new js__$Boot_HaxeError("No string matched");
		}
		var sz = this.r.m.index + this.r.m[0].length;
		return HxOverrides.substr(this.r.s,sz,this.r.s.length - sz);
	}
	,__class__: EReg
};
var _$Formula_Formula_$Impl_$ = {};
_$Formula_Formula_$Impl_$.__name__ = true;
_$Formula_Formula_$Impl_$._new = function(s,params) {
	var this1;
	var s1 = s;
	s1 = s1.replace(TermNode.clearSpacesReg.r,"");
	if(TermNode.nameReg.match(s1)) {
		var name = TermNode.nameReg.matched(1);
		s1 = HxOverrides.substr(s1,name.length + 1,null);
		if(s1 == "") {
			throw new js__$Boot_HaxeError("Can't parse Term from empty string.");
		}
		var term = TermNode.parseString(s1,null);
		var t = new TermNode();
		t.operation = TermNode.opName;
		t.symbol = name;
		t.left = term;
		t.right = null;
		this1 = t;
	} else {
		if(s1 == "") {
			throw new js__$Boot_HaxeError("Can't parse Term from empty string.");
		}
		this1 = TermNode.parseString(s1,null);
	}
	if(params != null) {
		_$Formula_Formula_$Impl_$.bind(this1,params);
	}
	return this1;
};
_$Formula_Formula_$Impl_$.set = function(this1,a) {
	if(Reflect.compareMethods(this1.operation,TermNode.opName)) {
		if(!Reflect.compareMethods(a.operation,TermNode.opName)) {
			this1.left = a.copy();
		} else if(a.left != null) {
			this1.left = a.left.copy();
		} else {
			this1.left = null;
		}
	} else if(!Reflect.compareMethods(a.operation,TermNode.opName)) {
		var t = a.copy();
		if(Reflect.compareMethods(t.operation,TermNode.opValue)) {
			this1.operation = TermNode.opValue;
			this1.symbol = null;
			this1.value = t.value;
			this1.left = null;
			this1.right = null;
		} else if(Reflect.compareMethods(t.operation,TermNode.opName)) {
			this1.operation = TermNode.opName;
			this1.symbol = t.symbol;
			this1.left = t.left;
			this1.right = null;
		} else if(Reflect.compareMethods(t.operation,TermNode.opParam)) {
			this1.operation = TermNode.opParam;
			this1.symbol = t.symbol;
			this1.left = t.left;
			this1.right = null;
		} else {
			var s = t.symbol;
			var left = t.left;
			var right = t.right;
			this1.operation = TermNode.MathOp.get(s);
			if(this1.operation != null) {
				this1.symbol = s;
				this1.left = left;
				this1.right = right;
			} else {
				throw new js__$Boot_HaxeError("\"" + s + "\" is no valid operation.");
			}
		}
	} else if(a.left != null) {
		var t1 = a.left.copy();
		if(Reflect.compareMethods(t1.operation,TermNode.opValue)) {
			this1.operation = TermNode.opValue;
			this1.symbol = null;
			this1.value = t1.value;
			this1.left = null;
			this1.right = null;
		} else if(Reflect.compareMethods(t1.operation,TermNode.opName)) {
			this1.operation = TermNode.opName;
			this1.symbol = t1.symbol;
			this1.left = t1.left;
			this1.right = null;
		} else if(Reflect.compareMethods(t1.operation,TermNode.opParam)) {
			this1.operation = TermNode.opParam;
			this1.symbol = t1.symbol;
			this1.left = t1.left;
			this1.right = null;
		} else {
			var s1 = t1.symbol;
			var left1 = t1.left;
			var right1 = t1.right;
			this1.operation = TermNode.MathOp.get(s1);
			if(this1.operation != null) {
				this1.symbol = s1;
				this1.left = left1;
				this1.right = right1;
			} else {
				throw new js__$Boot_HaxeError("\"" + s1 + "\" is no valid operation.");
			}
		}
	}
	return this1;
};
_$Formula_Formula_$Impl_$.bind = function(this1,params) {
	var map = new haxe_ds_StringMap();
	var arr = [];
	if(js_Boot.__instanceof(params,map == null ? null : js_Boot.getClass(map))) {
		map = params;
	} else if(js_Boot.__instanceof(params,arr == null ? null : js_Boot.getClass(arr))) {
		arr = params;
		var _g = 0;
		while(_g < arr.length) {
			var p = arr[_g];
			++_g;
			if((Reflect.compareMethods(p.operation,TermNode.opName) ? p.symbol : null) == null) {
				throw new js__$Boot_HaxeError("Can't bind to unnamed parameters.");
			}
		}
		var _g1 = new haxe_ds_StringMap();
		var _g11 = 0;
		while(_g11 < arr.length) {
			var p1 = arr[_g11];
			++_g11;
			var key = Reflect.compareMethods(p1.operation,TermNode.opName) ? p1.symbol : null;
			if(__map_reserved[key] != null) {
				_g1.setReserved(key,p1);
			} else {
				_g1.h[key] = p1;
			}
		}
		map = _g1;
	} else if(js_Boot.__instanceof(params,TermNode) || js_Boot.__instanceof(params,_$Formula_Formula_$Impl_$)) {
		var p2 = params;
		if((Reflect.compareMethods(p2.operation,TermNode.opName) ? p2.symbol : null) == null) {
			throw new js__$Boot_HaxeError("Can't bind to unnamed parameter.");
		}
		var _g2 = new haxe_ds_StringMap();
		var key1 = Reflect.compareMethods(p2.operation,TermNode.opName) ? p2.symbol : null;
		if(__map_reserved[key1] != null) {
			_g2.setReserved(key1,p2);
		} else {
			_g2.h[key1] = p2;
		}
		map = _g2;
	} else {
		throw new js__$Boot_HaxeError("Unbind parameter isn't of type: Formula, Array<Formula> or Map<String, Formula>.");
	}
	if(Reflect.compareMethods(this1.operation,TermNode.opParam)) {
		var key2 = this1.symbol;
		if(__map_reserved[key2] != null ? map.existsReserved(key2) : map.h.hasOwnProperty(key2)) {
			var key3 = this1.symbol;
			this1.left = __map_reserved[key3] != null ? map.getReserved(key3) : map.h[key3];
		}
	} else {
		if(this1.left != null) {
			this1.left.bind(map);
		}
		if(this1.right != null) {
			this1.right.bind(map);
		}
	}
	return this1;
};
_$Formula_Formula_$Impl_$.unbind = function(this1,params) {
	var map = new haxe_ds_ObjectMap();
	var arrString = [];
	var arrFormula = [];
	if(js_Boot.__instanceof(params,map == null ? null : js_Boot.getClass(map))) {
		map = params;
		if(this1.left != null) {
			if(map.h[this1.left.__id__] != null) {
				var name = map.h[this1.left.__id__];
				var t = new TermNode();
				t.operation = TermNode.opParam;
				t.symbol = name;
				t.left = null;
				t.right = null;
				this1.left = t;
			} else {
				this1.left.unbindTerm(map);
			}
		}
		if(this1.right != null) {
			if(map.h[this1.right.__id__] != null) {
				var name1 = map.h[this1.right.__id__];
				var t1 = new TermNode();
				t1.operation = TermNode.opParam;
				t1.symbol = name1;
				t1.left = null;
				t1.right = null;
				this1.right = t1;
			} else {
				this1.right.unbindTerm(map);
			}
		}
		return this1;
	} else if(js_Boot.__instanceof(params,arrString == null ? null : js_Boot.getClass(arrString))) {
		arrString = params;
		if(Reflect.compareMethods(this1.operation,TermNode.opParam)) {
			if(arrString.indexOf(this1.symbol) >= 0) {
				this1.left = null;
			}
		} else {
			if(this1.left != null) {
				this1.left.unbind(arrString);
			}
			if(this1.right != null) {
				this1.right.unbind(arrString);
			}
		}
		return this1;
	} else if(typeof(params) == "string") {
		var p = params;
		arrString = [p];
		if(Reflect.compareMethods(this1.operation,TermNode.opParam)) {
			if(arrString.indexOf(this1.symbol) >= 0) {
				this1.left = null;
			}
		} else {
			if(this1.left != null) {
				this1.left.unbind(arrString);
			}
			if(this1.right != null) {
				this1.right.unbind(arrString);
			}
		}
		return this1;
	} else if(js_Boot.__instanceof(params,arrFormula == null ? null : js_Boot.getClass(arrFormula))) {
		arrFormula = params;
		var _g = 0;
		while(_g < arrFormula.length) {
			var p1 = arrFormula[_g];
			++_g;
			if((Reflect.compareMethods(p1.operation,TermNode.opName) ? p1.symbol : null) == null) {
				throw new js__$Boot_HaxeError("Can't unbind unnamed parameters.");
			}
		}
		var _g1 = new haxe_ds_ObjectMap();
		var _g11 = 0;
		while(_g11 < arrFormula.length) {
			var p2 = arrFormula[_g11];
			++_g11;
			_g1.set(p2,Reflect.compareMethods(p2.operation,TermNode.opName) ? p2.symbol : null);
		}
		map = _g1;
		if(this1.left != null) {
			if(map.h[this1.left.__id__] != null) {
				var name2 = map.h[this1.left.__id__];
				var t2 = new TermNode();
				t2.operation = TermNode.opParam;
				t2.symbol = name2;
				t2.left = null;
				t2.right = null;
				this1.left = t2;
			} else {
				this1.left.unbindTerm(map);
			}
		}
		if(this1.right != null) {
			if(map.h[this1.right.__id__] != null) {
				var name3 = map.h[this1.right.__id__];
				var t3 = new TermNode();
				t3.operation = TermNode.opParam;
				t3.symbol = name3;
				t3.left = null;
				t3.right = null;
				this1.right = t3;
			} else {
				this1.right.unbindTerm(map);
			}
		}
		return this1;
	} else if(js_Boot.__instanceof(params,TermNode) || js_Boot.__instanceof(params,_$Formula_Formula_$Impl_$)) {
		var p3 = params;
		if((Reflect.compareMethods(p3.operation,TermNode.opName) ? p3.symbol : null) == null) {
			throw new js__$Boot_HaxeError("Can't unbind unnamed parameter.");
		}
		var _g2 = new haxe_ds_ObjectMap();
		_g2.set(p3,Reflect.compareMethods(p3.operation,TermNode.opName) ? p3.symbol : null);
		map = _g2;
		if(this1.left != null) {
			if(map.h[this1.left.__id__] != null) {
				var name4 = map.h[this1.left.__id__];
				var t4 = new TermNode();
				t4.operation = TermNode.opParam;
				t4.symbol = name4;
				t4.left = null;
				t4.right = null;
				this1.left = t4;
			} else {
				this1.left.unbindTerm(map);
			}
		}
		if(this1.right != null) {
			if(map.h[this1.right.__id__] != null) {
				var name5 = map.h[this1.right.__id__];
				var t5 = new TermNode();
				t5.operation = TermNode.opParam;
				t5.symbol = name5;
				t5.left = null;
				t5.right = null;
				this1.right = t5;
			} else {
				this1.right.unbindTerm(map);
			}
		}
		return this1;
	} else {
		throw new js__$Boot_HaxeError("Unbind parameter isn't of type: Formula, String, Array<String>, Array<Formula> or Map<Formula, String>.");
	}
};
_$Formula_Formula_$Impl_$.toString = function(this1,depth,plOut) {
	return this1.toString(depth,plOut);
};
_$Formula_Formula_$Impl_$.fromBytes = function(b) {
	return TermNode.fromBytes(b);
};
_$Formula_Formula_$Impl_$.toStr = function(this1) {
	return this1.toString(0);
};
_$Formula_Formula_$Impl_$.toFloat = function(this1) {
	return this1.operation(this1);
};
_$Formula_Formula_$Impl_$.fromString = function(a) {
	var s = a;
	s = s.replace(TermNode.clearSpacesReg.r,"");
	if(TermNode.nameReg.match(s)) {
		var name = TermNode.nameReg.matched(1);
		s = HxOverrides.substr(s,name.length + 1,null);
		if(s == "") {
			throw new js__$Boot_HaxeError("Can't parse Term from empty string.");
		}
		var term = TermNode.parseString(s,null);
		var t = new TermNode();
		t.operation = TermNode.opName;
		t.symbol = name;
		t.left = term;
		t.right = null;
		return t;
	} else {
		if(s == "") {
			throw new js__$Boot_HaxeError("Can't parse Term from empty string.");
		}
		return TermNode.parseString(s,null);
	}
};
_$Formula_Formula_$Impl_$.fromFloat = function(a) {
	var t = new TermNode();
	t.operation = TermNode.opValue;
	t.symbol = null;
	t.value = a;
	t.left = null;
	t.right = null;
	return t;
};
_$Formula_Formula_$Impl_$.twoSideOp = function(op,a,b) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var right;
	if((Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null) != null) {
		var name1 = Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null;
		var t1 = new TermNode();
		t1.operation = TermNode.opParam;
		t1.symbol = name1;
		t1.left = b;
		t1.right = null;
		right = t1;
	} else {
		right = b;
	}
	var t2 = new TermNode();
	t2.operation = TermNode.MathOp.get(op);
	if(t2.operation != null) {
		t2.symbol = op;
		t2.left = left;
		t2.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + op + "\" is no valid operation.");
	}
	return t2;
};
_$Formula_Formula_$Impl_$.add = function(a,b) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var right;
	if((Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null) != null) {
		var name1 = Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null;
		var t1 = new TermNode();
		t1.operation = TermNode.opParam;
		t1.symbol = name1;
		t1.left = b;
		t1.right = null;
		right = t1;
	} else {
		right = b;
	}
	var t2 = new TermNode();
	t2.operation = TermNode.MathOp.get("+");
	if(t2.operation != null) {
		t2.symbol = "+";
		t2.left = left;
		t2.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + "+" + "\" is no valid operation.");
	}
	return t2;
};
_$Formula_Formula_$Impl_$.subtract = function(a,b) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var right;
	if((Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null) != null) {
		var name1 = Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null;
		var t1 = new TermNode();
		t1.operation = TermNode.opParam;
		t1.symbol = name1;
		t1.left = b;
		t1.right = null;
		right = t1;
	} else {
		right = b;
	}
	var t2 = new TermNode();
	t2.operation = TermNode.MathOp.get("-");
	if(t2.operation != null) {
		t2.symbol = "-";
		t2.left = left;
		t2.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + "-" + "\" is no valid operation.");
	}
	return t2;
};
_$Formula_Formula_$Impl_$.multiply = function(a,b) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var right;
	if((Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null) != null) {
		var name1 = Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null;
		var t1 = new TermNode();
		t1.operation = TermNode.opParam;
		t1.symbol = name1;
		t1.left = b;
		t1.right = null;
		right = t1;
	} else {
		right = b;
	}
	var t2 = new TermNode();
	t2.operation = TermNode.MathOp.get("*");
	if(t2.operation != null) {
		t2.symbol = "*";
		t2.left = left;
		t2.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + "*" + "\" is no valid operation.");
	}
	return t2;
};
_$Formula_Formula_$Impl_$.divide = function(a,b) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var right;
	if((Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null) != null) {
		var name1 = Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null;
		var t1 = new TermNode();
		t1.operation = TermNode.opParam;
		t1.symbol = name1;
		t1.left = b;
		t1.right = null;
		right = t1;
	} else {
		right = b;
	}
	var t2 = new TermNode();
	t2.operation = TermNode.MathOp.get("/");
	if(t2.operation != null) {
		t2.symbol = "/";
		t2.left = left;
		t2.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + "/" + "\" is no valid operation.");
	}
	return t2;
};
_$Formula_Formula_$Impl_$.potenz = function(a,b) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var right;
	if((Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null) != null) {
		var name1 = Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null;
		var t1 = new TermNode();
		t1.operation = TermNode.opParam;
		t1.symbol = name1;
		t1.left = b;
		t1.right = null;
		right = t1;
	} else {
		right = b;
	}
	var t2 = new TermNode();
	t2.operation = TermNode.MathOp.get("^");
	if(t2.operation != null) {
		t2.symbol = "^";
		t2.left = left;
		t2.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + "^" + "\" is no valid operation.");
	}
	return t2;
};
_$Formula_Formula_$Impl_$.modulo = function(a,b) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var right;
	if((Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null) != null) {
		var name1 = Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null;
		var t1 = new TermNode();
		t1.operation = TermNode.opParam;
		t1.symbol = name1;
		t1.left = b;
		t1.right = null;
		right = t1;
	} else {
		right = b;
	}
	var t2 = new TermNode();
	t2.operation = TermNode.MathOp.get("%");
	if(t2.operation != null) {
		t2.symbol = "%";
		t2.left = left;
		t2.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + "%" + "\" is no valid operation.");
	}
	return t2;
};
_$Formula_Formula_$Impl_$.atan2 = function(a,b) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var right;
	if((Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null) != null) {
		var name1 = Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null;
		var t1 = new TermNode();
		t1.operation = TermNode.opParam;
		t1.symbol = name1;
		t1.left = b;
		t1.right = null;
		right = t1;
	} else {
		right = b;
	}
	var t2 = new TermNode();
	t2.operation = TermNode.MathOp.get("atan2");
	if(t2.operation != null) {
		t2.symbol = "atan2";
		t2.left = left;
		t2.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + "atan2" + "\" is no valid operation.");
	}
	return t2;
};
_$Formula_Formula_$Impl_$.log = function(a,b) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var right;
	if((Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null) != null) {
		var name1 = Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null;
		var t1 = new TermNode();
		t1.operation = TermNode.opParam;
		t1.symbol = name1;
		t1.left = b;
		t1.right = null;
		right = t1;
	} else {
		right = b;
	}
	var t2 = new TermNode();
	t2.operation = TermNode.MathOp.get("log");
	if(t2.operation != null) {
		t2.symbol = "log";
		t2.left = left;
		t2.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + "log" + "\" is no valid operation.");
	}
	return t2;
};
_$Formula_Formula_$Impl_$.max = function(a,b) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var right;
	if((Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null) != null) {
		var name1 = Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null;
		var t1 = new TermNode();
		t1.operation = TermNode.opParam;
		t1.symbol = name1;
		t1.left = b;
		t1.right = null;
		right = t1;
	} else {
		right = b;
	}
	var t2 = new TermNode();
	t2.operation = TermNode.MathOp.get("max");
	if(t2.operation != null) {
		t2.symbol = "max";
		t2.left = left;
		t2.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + "max" + "\" is no valid operation.");
	}
	return t2;
};
_$Formula_Formula_$Impl_$.min = function(a,b) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var right;
	if((Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null) != null) {
		var name1 = Reflect.compareMethods(b.operation,TermNode.opName) ? b.symbol : null;
		var t1 = new TermNode();
		t1.operation = TermNode.opParam;
		t1.symbol = name1;
		t1.left = b;
		t1.right = null;
		right = t1;
	} else {
		right = b;
	}
	var t2 = new TermNode();
	t2.operation = TermNode.MathOp.get("min");
	if(t2.operation != null) {
		t2.symbol = "min";
		t2.left = left;
		t2.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + "min" + "\" is no valid operation.");
	}
	return t2;
};
_$Formula_Formula_$Impl_$.oneParamOp = function(op,a) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var t1 = new TermNode();
	t1.operation = TermNode.MathOp.get(op);
	if(t1.operation != null) {
		t1.symbol = op;
		t1.left = left;
		t1.right = null;
	} else {
		throw new js__$Boot_HaxeError("\"" + op + "\" is no valid operation.");
	}
	return t1;
};
_$Formula_Formula_$Impl_$.abs = function(a) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var t1 = new TermNode();
	t1.operation = TermNode.MathOp.get("abs");
	if(t1.operation != null) {
		t1.symbol = "abs";
		t1.left = left;
		t1.right = null;
	} else {
		throw new js__$Boot_HaxeError("\"" + "abs" + "\" is no valid operation.");
	}
	return t1;
};
_$Formula_Formula_$Impl_$.ln = function(a) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var t1 = new TermNode();
	t1.operation = TermNode.MathOp.get("ln");
	if(t1.operation != null) {
		t1.symbol = "ln";
		t1.left = left;
		t1.right = null;
	} else {
		throw new js__$Boot_HaxeError("\"" + "ln" + "\" is no valid operation.");
	}
	return t1;
};
_$Formula_Formula_$Impl_$.sin = function(a) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var t1 = new TermNode();
	t1.operation = TermNode.MathOp.get("sin");
	if(t1.operation != null) {
		t1.symbol = "sin";
		t1.left = left;
		t1.right = null;
	} else {
		throw new js__$Boot_HaxeError("\"" + "sin" + "\" is no valid operation.");
	}
	return t1;
};
_$Formula_Formula_$Impl_$.cos = function(a) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var t1 = new TermNode();
	t1.operation = TermNode.MathOp.get("cos");
	if(t1.operation != null) {
		t1.symbol = "cos";
		t1.left = left;
		t1.right = null;
	} else {
		throw new js__$Boot_HaxeError("\"" + "cos" + "\" is no valid operation.");
	}
	return t1;
};
_$Formula_Formula_$Impl_$.tan = function(a) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var t1 = new TermNode();
	t1.operation = TermNode.MathOp.get("tan");
	if(t1.operation != null) {
		t1.symbol = "tan";
		t1.left = left;
		t1.right = null;
	} else {
		throw new js__$Boot_HaxeError("\"" + "tan" + "\" is no valid operation.");
	}
	return t1;
};
_$Formula_Formula_$Impl_$.cot = function(a) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var t1 = new TermNode();
	t1.operation = TermNode.MathOp.get("cot");
	if(t1.operation != null) {
		t1.symbol = "cot";
		t1.left = left;
		t1.right = null;
	} else {
		throw new js__$Boot_HaxeError("\"" + "cot" + "\" is no valid operation.");
	}
	return t1;
};
_$Formula_Formula_$Impl_$.asin = function(a) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var t1 = new TermNode();
	t1.operation = TermNode.MathOp.get("asin");
	if(t1.operation != null) {
		t1.symbol = "asin";
		t1.left = left;
		t1.right = null;
	} else {
		throw new js__$Boot_HaxeError("\"" + "asin" + "\" is no valid operation.");
	}
	return t1;
};
_$Formula_Formula_$Impl_$.acos = function(a) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var t1 = new TermNode();
	t1.operation = TermNode.MathOp.get("acos");
	if(t1.operation != null) {
		t1.symbol = "acos";
		t1.left = left;
		t1.right = null;
	} else {
		throw new js__$Boot_HaxeError("\"" + "acos" + "\" is no valid operation.");
	}
	return t1;
};
_$Formula_Formula_$Impl_$.atan = function(a) {
	var left;
	if((Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null) != null) {
		var name = Reflect.compareMethods(a.operation,TermNode.opName) ? a.symbol : null;
		var t = new TermNode();
		t.operation = TermNode.opParam;
		t.symbol = name;
		t.left = a;
		t.right = null;
		left = t;
	} else {
		left = a;
	}
	var t1 = new TermNode();
	t1.operation = TermNode.MathOp.get("atan");
	if(t1.operation != null) {
		t1.symbol = "atan";
		t1.left = left;
		t1.right = null;
	} else {
		throw new js__$Boot_HaxeError("\"" + "atan" + "\" is no valid operation.");
	}
	return t1;
};
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
Math.__name__ = true;
var TermNode = function() {
};
TermNode.__name__ = true;
TermNode.newName = function(name,term) {
	var t = new TermNode();
	t.operation = TermNode.opName;
	t.symbol = name;
	t.left = term;
	t.right = null;
	return t;
};
TermNode.newParam = function(name,term) {
	var t = new TermNode();
	t.operation = TermNode.opParam;
	t.symbol = name;
	t.left = term;
	t.right = null;
	return t;
};
TermNode.newValue = function(f) {
	var t = new TermNode();
	t.operation = TermNode.opValue;
	t.symbol = null;
	t.value = f;
	t.left = null;
	t.right = null;
	return t;
};
TermNode.newOperation = function(s,left,right) {
	var t = new TermNode();
	t.operation = TermNode.MathOp.get(s);
	if(t.operation != null) {
		t.symbol = s;
		t.left = left;
		t.right = right;
	} else {
		throw new js__$Boot_HaxeError("\"" + s + "\" is no valid operation.");
	}
	return t;
};
TermNode.opName = function(t) {
	if(t.left != null) {
		var _this = t.left;
		return _this.operation(_this);
	} else {
		throw new js__$Boot_HaxeError("Empty function \"" + t.symbol + "\".");
	}
};
TermNode.opParam = function(t) {
	if(t.left != null) {
		var _this = t.left;
		return _this.operation(_this);
	} else {
		throw new js__$Boot_HaxeError("Missing parameter \"" + t.symbol + "\".");
	}
};
TermNode.opValue = function(t) {
	return t.value;
};
TermNode.fromString = function(s,bindings) {
	s = s.replace(TermNode.clearSpacesReg.r,"");
	if(TermNode.nameReg.match(s)) {
		var name = TermNode.nameReg.matched(1);
		s = HxOverrides.substr(s,name.length + 1,null);
		if(s == "") {
			throw new js__$Boot_HaxeError("Can't parse Term from empty string.");
		}
		var term = TermNode.parseString(s,bindings);
		var t = new TermNode();
		t.operation = TermNode.opName;
		t.symbol = name;
		t.left = term;
		t.right = null;
		return t;
	}
	if(s == "") {
		throw new js__$Boot_HaxeError("Can't parse Term from empty string.");
	}
	return TermNode.parseString(s,bindings);
};
TermNode.parseString = function(s,params) {
	var t = null;
	var operations = [];
	var e;
	var f;
	var negate;
	while(s.length != 0) {
		negate = false;
		if(TermNode.numberReg.match(s)) {
			e = TermNode.numberReg.matched(1);
			var f1 = parseFloat(e);
			var t1 = new TermNode();
			t1.operation = TermNode.opValue;
			t1.symbol = null;
			t1.value = f1;
			t1.left = null;
			t1.right = null;
			t = t1;
		} else if(TermNode.constantOpReg.match(s)) {
			e = TermNode.constantOpReg.matched(1);
			var t2 = new TermNode();
			t2.operation = TermNode.MathOp.get(e);
			if(t2.operation != null) {
				t2.symbol = e;
				t2.left = null;
				t2.right = null;
			} else {
				throw new js__$Boot_HaxeError("\"" + e + "\" is no valid operation.");
			}
			t = t2;
			e += "()";
		} else if(TermNode.oneParamOpReg.match(s)) {
			f = TermNode.oneParamOpReg.matched(1);
			s = "(" + TermNode.oneParamOpReg.matchedRight();
			e = TermNode.getBrackets(s);
			var left = TermNode.parseString(e.substring(1,e.length - 1),params);
			var t3 = new TermNode();
			t3.operation = TermNode.MathOp.get(f);
			if(t3.operation != null) {
				t3.symbol = f;
				t3.left = left;
				t3.right = null;
			} else {
				throw new js__$Boot_HaxeError("\"" + f + "\" is no valid operation.");
			}
			t = t3;
		} else if(TermNode.twoParamOpReg.match(s)) {
			f = TermNode.twoParamOpReg.matched(1);
			s = "(" + TermNode.twoParamOpReg.matchedRight();
			e = TermNode.getBrackets(s);
			var p1 = e.substring(1,TermNode.comataPos);
			var p2 = e.substring(TermNode.comataPos + 1,e.length - 1);
			if(TermNode.comataPos == -1) {
				throw new js__$Boot_HaxeError(f + "() needs two parameter separated by comma.");
			}
			var left1 = TermNode.parseString(p1,params);
			var right = TermNode.parseString(p2,params);
			var t4 = new TermNode();
			t4.operation = TermNode.MathOp.get(f);
			if(t4.operation != null) {
				t4.symbol = f;
				t4.left = left1;
				t4.right = right;
			} else {
				throw new js__$Boot_HaxeError("\"" + f + "\" is no valid operation.");
			}
			t = t4;
		} else if(TermNode.paramReg.match(s)) {
			e = TermNode.paramReg.matched(1);
			var term = params == null ? null : __map_reserved[e] != null ? params.getReserved(e) : params.h[e];
			var t5 = new TermNode();
			t5.operation = TermNode.opParam;
			t5.symbol = e;
			t5.left = term;
			t5.right = null;
			t = t5;
		} else if(TermNode.twoSideOpReg.match(s)) {
			e = TermNode.twoSideOpReg.matched(1);
			if(e == "-") {
				var t6 = new TermNode();
				t6.operation = TermNode.opValue;
				t6.symbol = null;
				t6.value = 0;
				t6.left = null;
				t6.right = null;
				t = t6;
				e = "";
				negate = true;
			} else if(e != "+") {
				throw new js__$Boot_HaxeError("Missing left operand.");
			}
		} else {
			e = TermNode.getBrackets(s);
			t = TermNode.parseString(e.substring(1,e.length - 1),params);
		}
		s = HxOverrides.substr(s,e.length,null);
		if(operations.length > 0) {
			operations[operations.length - 1].right = t;
		}
		if(TermNode.twoSideOpReg.match(s)) {
			e = TermNode.twoSideOpReg.matched(1);
			s = TermNode.twoSideOpReg.matchedRight();
			var tmp;
			if(negate) {
				tmp = -1;
			} else {
				var _this = TermNode.precedence;
				if(__map_reserved[e] != null) {
					tmp = _this.getReserved(e);
				} else {
					tmp = _this.h[e];
				}
			}
			operations.push({ symbol : e, left : t, right : null, leftOperation : null, rightOperation : null, precedence : tmp});
			if(operations.length > 1) {
				operations[operations.length - 2].rightOperation = operations[operations.length - 1];
				operations[operations.length - 1].leftOperation = operations[operations.length - 2];
			}
		} else if(s.length > 0) {
			throw new js__$Boot_HaxeError("Missing operation.");
		}
	}
	if(operations.length > 0) {
		if(operations[operations.length - 1].right == null) {
			throw new js__$Boot_HaxeError("Missing right operand.");
		} else {
			operations.sort(function(a,b) {
				if(a.precedence < b.precedence) {
					return -1;
				}
				if(a.precedence > b.precedence) {
					return 1;
				}
				return 0;
			});
			var _g = 0;
			while(_g < operations.length) {
				var op = operations[_g];
				++_g;
				var s1 = op.symbol;
				var left2 = op.left;
				var right1 = op.right;
				var t7 = new TermNode();
				t7.operation = TermNode.MathOp.get(s1);
				if(t7.operation != null) {
					t7.symbol = s1;
					t7.left = left2;
					t7.right = right1;
				} else {
					throw new js__$Boot_HaxeError("\"" + s1 + "\" is no valid operation.");
				}
				t = t7;
				if(op.leftOperation != null && op.rightOperation != null) {
					op.rightOperation.leftOperation = op.leftOperation;
					op.leftOperation.rightOperation = op.rightOperation;
				}
				if(op.leftOperation != null) {
					op.leftOperation.right = t;
				}
				if(op.rightOperation != null) {
					op.rightOperation.left = t;
				}
			}
			return t;
		}
	} else {
		return t;
	}
};
TermNode.getBrackets = function(s) {
	var pos = 1;
	if(s.indexOf("(") == 0) {
		var i;
		var j;
		var k;
		var openBrackets = 1;
		TermNode.comataPos = -1;
		while(openBrackets > 0) {
			i = s.indexOf("(",pos);
			j = s.indexOf(")",pos);
			if(openBrackets == 1 && TermNode.comataPos == -1) {
				k = s.indexOf(",",pos);
				if(k < j && j > 0) {
					TermNode.comataPos = k;
				}
			}
			if(i > 0 && j > 0 && i < j || i > 0 && j < 0) {
				++openBrackets;
				pos = i + 1;
			} else if(j > 0 && i > 0 && j < i || j > 0 && i < 0) {
				--openBrackets;
				pos = j + 1;
			} else {
				throw new js__$Boot_HaxeError("Wrong bracket nesting.");
			}
		}
		if(pos < 3) {
			throw new js__$Boot_HaxeError("Empty brackets.");
		} else {
			return s.substring(0,pos);
		}
	}
	throw new js__$Boot_HaxeError("No opening bracket.");
};
TermNode.fromBytes = function(b) {
	var b1 = new haxe_io_BytesInput(b);
	var _g = b1.readByte();
	switch(_g) {
	case 0:
		var f = b1.readFloat();
		var t = new TermNode();
		t.operation = TermNode.opValue;
		t.symbol = null;
		t.value = f;
		t.left = null;
		t.right = null;
		return t;
	case 1:
		var len = b1.readByte();
		var s = "";
		var _g1 = 0;
		var _g2 = len;
		while(_g1 < _g2) {
			var i = _g1++;
			s += String.fromCharCode(b1.readByte());
		}
		var term = TermNode._fromBytes(b1);
		var t1 = new TermNode();
		t1.operation = TermNode.opName;
		t1.symbol = s;
		t1.left = term;
		t1.right = null;
		return t1;
	case 2:
		var len1 = b1.readByte();
		var s1 = "";
		var _g11 = 0;
		var _g3 = len1;
		while(_g11 < _g3) {
			var i1 = _g11++;
			s1 += String.fromCharCode(b1.readByte());
		}
		var t2 = new TermNode();
		t2.operation = TermNode.opName;
		t2.symbol = s1;
		t2.left = null;
		t2.right = null;
		return t2;
	case 3:
		var len2 = b1.readByte();
		var s2 = "";
		var _g12 = 0;
		var _g4 = len2;
		while(_g12 < _g4) {
			var i2 = _g12++;
			s2 += String.fromCharCode(b1.readByte());
		}
		var term1 = TermNode._fromBytes(b1);
		var t3 = new TermNode();
		t3.operation = TermNode.opParam;
		t3.symbol = s2;
		t3.left = term1;
		t3.right = null;
		return t3;
	case 4:
		var len3 = b1.readByte();
		var s3 = "";
		var _g13 = 0;
		var _g5 = len3;
		while(_g13 < _g5) {
			var i3 = _g13++;
			s3 += String.fromCharCode(b1.readByte());
		}
		var t4 = new TermNode();
		t4.operation = TermNode.opParam;
		t4.symbol = s3;
		t4.left = null;
		t4.right = null;
		return t4;
	case 5:
		var op = TermNode.twoSideOp.concat(TermNode.constantOp.concat(TermNode.oneParamOp.concat(TermNode.twoParamOp)))[b1.readByte()];
		if(TermNode.oneParamOpRegFull.match(op)) {
			var left = TermNode._fromBytes(b1);
			var t5 = new TermNode();
			t5.operation = TermNode.MathOp.get(op);
			if(t5.operation != null) {
				t5.symbol = op;
				t5.left = left;
				t5.right = null;
			} else {
				throw new js__$Boot_HaxeError("\"" + op + "\" is no valid operation.");
			}
			return t5;
		} else if(TermNode.twoSideOpRegFull.match(op) || TermNode.twoParamOpRegFull.match(op)) {
			var left1 = TermNode._fromBytes(b1);
			var right = TermNode._fromBytes(b1);
			var t6 = new TermNode();
			t6.operation = TermNode.MathOp.get(op);
			if(t6.operation != null) {
				t6.symbol = op;
				t6.left = left1;
				t6.right = right;
			} else {
				throw new js__$Boot_HaxeError("\"" + op + "\" is no valid operation.");
			}
			return t6;
		} else {
			var t7 = new TermNode();
			t7.operation = TermNode.MathOp.get(op);
			if(t7.operation != null) {
				t7.symbol = op;
				t7.left = null;
				t7.right = null;
			} else {
				throw new js__$Boot_HaxeError("\"" + op + "\" is no valid operation.");
			}
			return t7;
		}
		break;
	default:
		throw new js__$Boot_HaxeError("Error in _fromBytes");
	}
};
TermNode._fromBytes = function(b) {
	var _g = b.readByte();
	switch(_g) {
	case 0:
		var f = b.readFloat();
		var t = new TermNode();
		t.operation = TermNode.opValue;
		t.symbol = null;
		t.value = f;
		t.left = null;
		t.right = null;
		return t;
	case 1:
		var len = b.readByte();
		var s = "";
		var _g1 = 0;
		var _g2 = len;
		while(_g1 < _g2) {
			var i = _g1++;
			s += String.fromCharCode(b.readByte());
		}
		var term = TermNode._fromBytes(b);
		var t1 = new TermNode();
		t1.operation = TermNode.opName;
		t1.symbol = s;
		t1.left = term;
		t1.right = null;
		return t1;
	case 2:
		var len1 = b.readByte();
		var s1 = "";
		var _g11 = 0;
		var _g3 = len1;
		while(_g11 < _g3) {
			var i1 = _g11++;
			s1 += String.fromCharCode(b.readByte());
		}
		var t2 = new TermNode();
		t2.operation = TermNode.opName;
		t2.symbol = s1;
		t2.left = null;
		t2.right = null;
		return t2;
	case 3:
		var len2 = b.readByte();
		var s2 = "";
		var _g12 = 0;
		var _g4 = len2;
		while(_g12 < _g4) {
			var i2 = _g12++;
			s2 += String.fromCharCode(b.readByte());
		}
		var term1 = TermNode._fromBytes(b);
		var t3 = new TermNode();
		t3.operation = TermNode.opParam;
		t3.symbol = s2;
		t3.left = term1;
		t3.right = null;
		return t3;
	case 4:
		var len3 = b.readByte();
		var s3 = "";
		var _g13 = 0;
		var _g5 = len3;
		while(_g13 < _g5) {
			var i3 = _g13++;
			s3 += String.fromCharCode(b.readByte());
		}
		var t4 = new TermNode();
		t4.operation = TermNode.opParam;
		t4.symbol = s3;
		t4.left = null;
		t4.right = null;
		return t4;
	case 5:
		var op = TermNode.twoSideOp.concat(TermNode.constantOp.concat(TermNode.oneParamOp.concat(TermNode.twoParamOp)))[b.readByte()];
		if(TermNode.oneParamOpRegFull.match(op)) {
			var left = TermNode._fromBytes(b);
			var t5 = new TermNode();
			t5.operation = TermNode.MathOp.get(op);
			if(t5.operation != null) {
				t5.symbol = op;
				t5.left = left;
				t5.right = null;
			} else {
				throw new js__$Boot_HaxeError("\"" + op + "\" is no valid operation.");
			}
			return t5;
		} else if(TermNode.twoSideOpRegFull.match(op) || TermNode.twoParamOpRegFull.match(op)) {
			var left1 = TermNode._fromBytes(b);
			var right = TermNode._fromBytes(b);
			var t6 = new TermNode();
			t6.operation = TermNode.MathOp.get(op);
			if(t6.operation != null) {
				t6.symbol = op;
				t6.left = left1;
				t6.right = right;
			} else {
				throw new js__$Boot_HaxeError("\"" + op + "\" is no valid operation.");
			}
			return t6;
		} else {
			var t7 = new TermNode();
			t7.operation = TermNode.MathOp.get(op);
			if(t7.operation != null) {
				t7.symbol = op;
				t7.left = null;
				t7.right = null;
			} else {
				throw new js__$Boot_HaxeError("\"" + op + "\" is no valid operation.");
			}
			return t7;
		}
		break;
	default:
		throw new js__$Boot_HaxeError("Error in _fromBytes");
	}
};
TermNode._readString = function(b) {
	var len = b.readByte();
	var s = "";
	var _g1 = 0;
	var _g = len;
	while(_g1 < _g) {
		var i = _g1++;
		s += String.fromCharCode(b.readByte());
	}
	return s;
};
TermNode.prototype = {
	params: function() {
		var ret = [];
		if(Reflect.compareMethods(this.operation,TermNode.opParam)) {
			ret.push(this.symbol);
		} else {
			if(this.left != null) {
				var _g = 0;
				var _g1 = this.left.params();
				while(_g < _g1.length) {
					var i = _g1[_g];
					++_g;
					if(ret.indexOf(i) < 0) {
						ret.push(i);
					}
				}
			}
			if(this.right != null) {
				var _g2 = 0;
				var _g11 = this.right.params();
				while(_g2 < _g11.length) {
					var i1 = _g11[_g2];
					++_g2;
					if(ret.indexOf(i1) < 0) {
						ret.push(i1);
					}
				}
			}
		}
		return ret;
	}
	,bind: function(params) {
		if(Reflect.compareMethods(this.operation,TermNode.opParam)) {
			var key = this.symbol;
			if(__map_reserved[key] != null ? params.existsReserved(key) : params.h.hasOwnProperty(key)) {
				var key1 = this.symbol;
				this.left = __map_reserved[key1] != null ? params.getReserved(key1) : params.h[key1];
			}
		} else {
			if(this.left != null) {
				this.left.bind(params);
			}
			if(this.right != null) {
				this.right.bind(params);
			}
		}
		return this;
	}
	,unbind: function(params) {
		if(Reflect.compareMethods(this.operation,TermNode.opParam)) {
			if(params.indexOf(this.symbol) >= 0) {
				this.left = null;
			}
		} else {
			if(this.left != null) {
				this.left.unbind(params);
			}
			if(this.right != null) {
				this.right.unbind(params);
			}
		}
		return this;
	}
	,unbindTerm: function(params) {
		if(this.left != null) {
			if(params.h[this.left.__id__] != null) {
				var name = params.h[this.left.__id__];
				var t = new TermNode();
				t.operation = TermNode.opParam;
				t.symbol = name;
				t.left = null;
				t.right = null;
				this.left = t;
			} else {
				this.left.unbindTerm(params);
			}
		}
		if(this.right != null) {
			if(params.h[this.right.__id__] != null) {
				var name1 = params.h[this.right.__id__];
				var t1 = new TermNode();
				t1.operation = TermNode.opParam;
				t1.symbol = name1;
				t1.left = null;
				t1.right = null;
				this.right = t1;
			} else {
				this.right.unbindTerm(params);
			}
		}
		return this;
	}
	,copy: function() {
		if(Reflect.compareMethods(this.operation,TermNode.opValue)) {
			var f = this.value;
			var t = new TermNode();
			t.operation = TermNode.opValue;
			t.symbol = null;
			t.value = f;
			t.left = null;
			t.right = null;
			return t;
		} else if(Reflect.compareMethods(this.operation,TermNode.opName)) {
			var name = this.symbol;
			var term = this.left != null ? this.left.copy() : null;
			var t1 = new TermNode();
			t1.operation = TermNode.opName;
			t1.symbol = name;
			t1.left = term;
			t1.right = null;
			return t1;
		} else if(Reflect.compareMethods(this.operation,TermNode.opParam)) {
			var name1 = this.symbol;
			var term1 = this.left != null ? this.left.copy() : null;
			var t2 = new TermNode();
			t2.operation = TermNode.opParam;
			t2.symbol = name1;
			t2.left = term1;
			t2.right = null;
			return t2;
		} else {
			var s = this.symbol;
			var left = this.left != null ? this.left.copy() : null;
			var right = this.right != null ? this.right.copy() : null;
			var t3 = new TermNode();
			t3.operation = TermNode.MathOp.get(s);
			if(t3.operation != null) {
				t3.symbol = s;
				t3.left = left;
				t3.right = right;
			} else {
				throw new js__$Boot_HaxeError("\"" + s + "\" is no valid operation.");
			}
			return t3;
		}
	}
	,toString: function(depth,plOut) {
		var t = this;
		if(Reflect.compareMethods(this.operation,TermNode.opName)) {
			t = this.left;
		}
		var options = plOut == null ? 0 : plOut == "glsl" ? 127 : 0;
		if(this.left != null || !Reflect.compareMethods(this.operation,TermNode.opName)) {
			var depth1 = depth;
			if(depth1 == null) {
				depth1 = -1;
			}
			var _g = t.symbol;
			var s = _g;
			if(Reflect.compareMethods(t.operation,TermNode.opValue)) {
				var s1 = Std.string(t.value);
				if((options & 2) > 0 && s1.indexOf(".") == -1) {
					s1 += ".0";
				}
				return s1;
			} else {
				var s2 = _g;
				if(Reflect.compareMethods(t.operation,TermNode.opName)) {
					if(depth1 == 0 || t.left == null) {
						return t.symbol;
					} else {
						return t.left._toString(depth1 - 1,options,false);
					}
				} else {
					var s3 = _g;
					if(Reflect.compareMethods(t.operation,TermNode.opParam)) {
						if(depth1 == 0 || t.left == null) {
							return t.symbol;
						} else {
							return t.left._toString(depth1 - (Reflect.compareMethods(t.left.operation,TermNode.opName) ? 0 : 1),options,false);
						}
					} else {
						var s4 = _g;
						if(TermNode.twoSideOpRegFull.match(s4)) {
							if(t.symbol == "-" && Reflect.compareMethods(t.left.operation,TermNode.opValue) && t.left.value == 0 && (options & 1) == 0) {
								return t.symbol + t.right._toString(depth1,options,false);
							} else if(t.symbol == "^" && (options & 4) > 0) {
								return "pow" + "(" + t.left._toString(depth1,options,null) + "," + t.right._toString(depth1,options,null) + ")";
							} else if(t.symbol == "%" && (options & 8) > 0) {
								return "mod" + "(" + t.left._toString(depth1,options,null) + "," + t.right._toString(depth1,options,null) + ")";
							} else {
								return "" + t.left._toString(depth1,options,false) + t.symbol + t.right._toString(depth1,options,false) + "";
							}
						} else {
							var s5 = _g;
							if(TermNode.twoParamOpRegFull.match(s5)) {
								if(t.symbol == "log" && (options & 16) > 0) {
									return "(log(" + t.right._toString(depth1,options,null) + ")/log(" + t.left._toString(depth1,options,null) + "))";
								} else if(t.symbol == "atan2" && (options & 32) > 0) {
									return "atan(" + t.left._toString(depth1,options,null) + "," + t.right._toString(depth1,options,null) + ")";
								} else {
									return t.symbol + "(" + t.left._toString(depth1,options,null) + "," + t.right._toString(depth1,options,null) + ")";
								}
							} else {
								var s6 = _g;
								if(TermNode.constantOpRegFull.match(s6)) {
									if(t.symbol == "pi" && (options & 64) > 0) {
										return Std.string(Math.PI);
									} else if(t.symbol == "e" && (options & 64) > 0) {
										return Std.string(Math.exp(1));
									} else {
										return t.symbol + "()";
									}
								} else if(t.symbol == "ln" && (options & 16) > 0) {
									return "log" + "(" + t.left._toString(depth1,options,null) + ")";
								} else {
									return t.symbol + "(" + t.left._toString(depth1,options,null) + ")";
								}
							}
						}
					}
				}
			}
		} else {
			return "";
		}
	}
	,_toString: function(depth,options,isFirst) {
		if(isFirst == null) {
			isFirst = true;
		}
		if(depth == null) {
			depth = -1;
		}
		var _g = this.symbol;
		var s = _g;
		if(Reflect.compareMethods(this.operation,TermNode.opValue)) {
			var s1 = Std.string(this.value);
			if((options & 2) > 0 && s1.indexOf(".") == -1) {
				s1 += ".0";
			}
			return s1;
		} else {
			var s2 = _g;
			if(Reflect.compareMethods(this.operation,TermNode.opName)) {
				if(depth == 0 || this.left == null) {
					return this.symbol;
				} else {
					return this.left._toString(depth - 1,options,false);
				}
			} else {
				var s3 = _g;
				if(Reflect.compareMethods(this.operation,TermNode.opParam)) {
					if(depth == 0 || this.left == null) {
						return this.symbol;
					} else {
						return this.left._toString(depth - (Reflect.compareMethods(this.left.operation,TermNode.opName) ? 0 : 1),options,false);
					}
				} else {
					var s4 = _g;
					if(TermNode.twoSideOpRegFull.match(s4)) {
						if(this.symbol == "-" && Reflect.compareMethods(this.left.operation,TermNode.opValue) && this.left.value == 0 && (options & 1) == 0) {
							return this.symbol + this.right._toString(depth,options,false);
						} else if(this.symbol == "^" && (options & 4) > 0) {
							return "pow" + "(" + this.left._toString(depth,options,null) + "," + this.right._toString(depth,options,null) + ")";
						} else if(this.symbol == "%" && (options & 8) > 0) {
							return "mod" + "(" + this.left._toString(depth,options,null) + "," + this.right._toString(depth,options,null) + ")";
						} else {
							return (isFirst ? "" : "(") + this.left._toString(depth,options,false) + this.symbol + this.right._toString(depth,options,false) + (isFirst ? "" : ")");
						}
					} else {
						var s5 = _g;
						if(TermNode.twoParamOpRegFull.match(s5)) {
							if(this.symbol == "log" && (options & 16) > 0) {
								return "(log(" + this.right._toString(depth,options,null) + ")/log(" + this.left._toString(depth,options,null) + "))";
							} else if(this.symbol == "atan2" && (options & 32) > 0) {
								return "atan(" + this.left._toString(depth,options,null) + "," + this.right._toString(depth,options,null) + ")";
							} else {
								return this.symbol + "(" + this.left._toString(depth,options,null) + "," + this.right._toString(depth,options,null) + ")";
							}
						} else {
							var s6 = _g;
							if(TermNode.constantOpRegFull.match(s6)) {
								if(this.symbol == "pi" && (options & 64) > 0) {
									return Std.string(Math.PI);
								} else if(this.symbol == "e" && (options & 64) > 0) {
									return Std.string(Math.exp(1));
								} else {
									return this.symbol + "()";
								}
							} else if(this.symbol == "ln" && (options & 16) > 0) {
								return "log" + "(" + this.left._toString(depth,options,null) + ")";
							} else {
								return this.symbol + "(" + this.left._toString(depth,options,null) + ")";
							}
						}
					}
				}
			}
		}
	}
	,__class__: TermNode
};
var Main = function() { };
Main.__name__ = true;
Main.main = function() {
	Main.width = window.innerWidth;
	Main.height = window.innerHeight;
	Main.canvas = window.document.createElement("canvas");
	Main.canvas.width = Main.width;
	Main.canvas.height = Main.height;
	Main.canvas.style.position = "absolute";
	Main.canvas.style.top = "0px";
	Main.canvas.style.left = "0px";
	Main.canvas.style.zIndex = "-1024";
	window.document.body.appendChild(Main.canvas);
	try {
		Main.gl = Main.canvas.getContext("experimental-webgl");
		if(Main.gl == null) {
			throw new js__$Boot_HaxeError("x");
		}
	} catch( err ) {
		throw new js__$Boot_HaxeError("Your web browser does not support WebGL!");
	}
	Main.input = window.document.createElement("input");
	var tmp = Main.formula.toString(0);
	Main.input.value = tmp;
	window.document.body.appendChild(Main.input);
	Main.input.onchange = function(event) {
		Main.updateFormula(Main.input.value);
	};
	Main.draw();
};
Main.updateFormula = function(_formula) {
	if(_formula != null && _formula != "") {
		try {
			var this1;
			var s = _formula;
			s = s.replace(TermNode.clearSpacesReg.r,"");
			if(TermNode.nameReg.match(s)) {
				var name = TermNode.nameReg.matched(1);
				s = HxOverrides.substr(s,name.length + 1,null);
				if(s == "") {
					throw new js__$Boot_HaxeError("Can't parse Term from empty string.");
				}
				var term = TermNode.parseString(s,null);
				var t = new TermNode();
				t.operation = TermNode.opName;
				t.symbol = name;
				t.left = term;
				t.right = null;
				this1 = t;
			} else {
				if(s == "") {
					throw new js__$Boot_HaxeError("Can't parse Term from empty string.");
				}
				this1 = TermNode.parseString(s,null);
			}
			var f = this1;
			var ret = [];
			if(Reflect.compareMethods(f.operation,TermNode.opParam)) {
				ret.push(f.symbol);
			} else {
				if(f.left != null) {
					var _g = 0;
					var _g1 = f.left.params();
					while(_g < _g1.length) {
						var i = _g1[_g];
						++_g;
						if(ret.indexOf(i) < 0) {
							ret.push(i);
						}
					}
				}
				if(f.right != null) {
					var _g2 = 0;
					var _g11 = f.right.params();
					while(_g2 < _g11.length) {
						var i1 = _g11[_g2];
						++_g2;
						if(ret.indexOf(i1) < 0) {
							ret.push(i1);
						}
					}
				}
			}
			var p = ret;
			if(p.indexOf("x") > -1 && p.indexOf("y") > -1) {
				Main.formula = f;
				Main.input.style.backgroundColor = "#ffffff";
				Main.draw();
			} else {
				console.log("Error: wrong params, need x and y");
				Main.input.style.backgroundColor = "#ffddcc";
			}
		} catch( msg ) {
			if (msg instanceof js__$Boot_HaxeError) msg = msg.val;
			if( js_Boot.__instanceof(msg,String) ) {
				console.log("Error: " + msg);
				Main.input.style.backgroundColor = "#ffddcc";
			} else throw(msg);
		}
	}
};
Main.draw = function() {
	Main.gl.clearColor(0.0,0.0,0.0,1);
	Main.gl.clear(16384);
	var prog = Main.shaderProgram(Main.gl,"\n\t\t\t\tattribute vec2 pos;\n\t\t\t\tvarying vec2 vTexCoord;\n\t\t\t\tvoid main() {\n\t\t\t\t\tvTexCoord = pos;\n\t\t\t\t\tgl_Position = vec4(pos, 0.0, 1.0);\n\t\t\t\t}\n\t\t\t","\n\t\t\t\tprecision highp float;\n\t\t\t\tvarying vec2 vTexCoord;\n\t\t\t\tvoid main() {\n\t\t\t\t\tfloat x = vTexCoord.x;\n\t\t\t\t\tfloat y = vTexCoord.y;\n\t\t\t\t\t/*\n\t\t\t\t\tif ( y > sin(x*2.0*3.14) ) {\n\t\t\t\t\t\tgl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n\t\t\t\t\t}\n\t\t\t\t\t*/\n\t\t\t\t\tif ( " + Main.formula.toString(null,"glsl") + " < 1.0 ) {\n\t\t\t\t\t\tgl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 1.0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t");
	Main.gl.useProgram(prog);
	Main.attributeSetFloats(Main.gl,prog,"pos",2,new Float32Array([-1,1,-1,-1,1,1,1,-1]));
	Main.gl.drawArrays(5,0,4);
};
Main.shaderProgram = function(gl,vs,fs) {
	var prog = gl.createProgram();
	var addshader = function(type,source) {
		var shader = gl.createShader(type);
		gl.shaderSource(shader,source);
		gl.compileShader(shader);
		if(!gl.getShaderParameter(shader,35713)) {
			throw new js__$Boot_HaxeError("Could not compile shader:\n\n" + gl.getShaderInfoLog(shader));
		}
		gl.attachShader(prog,shader);
	};
	addshader(35633,vs);
	addshader(35632,fs);
	gl.linkProgram(prog);
	if(!gl.getProgramParameter(prog,35714)) {
		throw new js__$Boot_HaxeError("Could not link the shader program!");
	}
	return prog;
};
Main.attributeSetFloats = function(gl,prog,attr_name,rsize,arr) {
	gl.bindBuffer(34962,gl.createBuffer());
	gl.bufferData(34962,arr,35044);
	var attr = gl.getAttribLocation(prog,attr_name);
	gl.enableVertexAttribArray(attr);
	gl.vertexAttribPointer(attr,rsize,5126,false,0,0);
};
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
var Std = function() { };
Std.__name__ = true;
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
haxe_IMap.prototype = {
	__class__: haxe_IMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
haxe_ds_ObjectMap.__name__ = true;
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,get: function(key) {
		return this.h[key.__id__];
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	get: function(key) {
		if(__map_reserved[key] != null) {
			return this.getReserved(key);
		}
		return this.h[key];
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,__class__: haxe_ds_StringMap
};
var haxe_io_Bytes = function() { };
haxe_io_Bytes.__name__ = true;
haxe_io_Bytes.prototype = {
	__class__: haxe_io_Bytes
};
var haxe_io_Input = function() { };
haxe_io_Input.__name__ = true;
haxe_io_Input.prototype = {
	readByte: function() {
		throw new js__$Boot_HaxeError("Not implemented");
	}
	,readFloat: function() {
		return haxe_io_FPHelper.i32ToFloat(this.readInt32());
	}
	,readInt32: function() {
		var ch1 = this.readByte();
		var ch2 = this.readByte();
		var ch3 = this.readByte();
		var ch4 = this.readByte();
		if(this.bigEndian) {
			return ch4 | ch3 << 8 | ch2 << 16 | ch1 << 24;
		} else {
			return ch1 | ch2 << 8 | ch3 << 16 | ch4 << 24;
		}
	}
	,__class__: haxe_io_Input
};
var haxe_io_BytesInput = function(b,pos,len) {
	if(pos == null) {
		pos = 0;
	}
	if(len == null) {
		len = b.length - pos;
	}
	if(pos < 0 || len < 0 || pos + len > b.length) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
	this.b = b.b;
	this.pos = pos;
	this.len = len;
	this.totlen = len;
};
haxe_io_BytesInput.__name__ = true;
haxe_io_BytesInput.__super__ = haxe_io_Input;
haxe_io_BytesInput.prototype = $extend(haxe_io_Input.prototype,{
	readByte: function() {
		if(this.len == 0) {
			throw new js__$Boot_HaxeError(new haxe_io_Eof());
		}
		this.len--;
		return this.b[this.pos++];
	}
	,__class__: haxe_io_BytesInput
});
var haxe_io_Eof = function() {
};
haxe_io_Eof.__name__ = true;
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = { __ename__ : true, __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
haxe_io_FPHelper.__name__ = true;
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0 ? -f : f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	var sig = Math.round((af / Math.pow(2,exp) - 1) * 8388608);
	if(sig == 8388608 && exp < 128) {
		sig = 0;
		++exp;
	}
	return (f < 0 ? -2147483648 : 0) | exp + 127 << 23 | sig;
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) {
			var i = _g1++;
			this.a[i] = 0;
		}
		this.byteLength = len;
	}
};
js_html_compat_ArrayBuffer.__name__ = true;
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null ? null : end - begin);
	var result = new ArrayBuffer(u.byteLength);
	var resultArray = new Uint8Array(result);
	resultArray.set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_Float32Array = function() { };
js_html_compat_Float32Array.__name__ = true;
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
js_html_compat_Uint8Array.__name__ = true;
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {};
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
TermNode.MathOp = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	if(__map_reserved["+"] != null) {
		_g.setReserved("+",function(t1) {
			var _this2 = t1.left;
			var tmp = _this2.operation(_this2);
			var _this11 = t1.right;
			return tmp + _this11.operation(_this11);
		});
	} else {
		_g.h["+"] = function(t1) {
			var _this2 = t1.left;
			var tmp1 = _this2.operation(_this2);
			var _this11 = t1.right;
			return tmp1 + _this11.operation(_this11);
		};
	}
	if(__map_reserved["-"] != null) {
		_g.setReserved("-",function(t21) {
			var _this31 = t21.left;
			var tmp2 = _this31.operation(_this31);
			var _this41 = t21.right;
			return tmp2 - _this41.operation(_this41);
		});
	} else {
		_g.h["-"] = function(t21) {
			var _this31 = t21.left;
			var tmp3 = _this31.operation(_this31);
			var _this41 = t21.right;
			return tmp3 - _this41.operation(_this41);
		};
	}
	if(__map_reserved["*"] != null) {
		_g.setReserved("*",function(t31) {
			var _this51 = t31.left;
			var tmp4 = _this51.operation(_this51);
			var _this61 = t31.right;
			return tmp4 * _this61.operation(_this61);
		});
	} else {
		_g.h["*"] = function(t31) {
			var _this51 = t31.left;
			var tmp5 = _this51.operation(_this51);
			var _this61 = t31.right;
			return tmp5 * _this61.operation(_this61);
		};
	}
	if(__map_reserved["/"] != null) {
		_g.setReserved("/",function(t41) {
			var _this71 = t41.left;
			var tmp6 = _this71.operation(_this71);
			var _this81 = t41.right;
			return tmp6 / _this81.operation(_this81);
		});
	} else {
		_g.h["/"] = function(t41) {
			var _this71 = t41.left;
			var tmp7 = _this71.operation(_this71);
			var _this81 = t41.right;
			return tmp7 / _this81.operation(_this81);
		};
	}
	if(__map_reserved["^"] != null) {
		_g.setReserved("^",function(t51) {
			var _this91 = t51.left;
			var tmp8 = _this91.operation(_this91);
			var _this101 = t51.right;
			return Math.pow(tmp8,_this101.operation(_this101));
		});
	} else {
		_g.h["^"] = function(t51) {
			var _this91 = t51.left;
			var tmp9 = _this91.operation(_this91);
			var _this101 = t51.right;
			return Math.pow(tmp9,_this101.operation(_this101));
		};
	}
	if(__map_reserved["%"] != null) {
		_g.setReserved("%",function(t61) {
			var _this121 = t61.left;
			var tmp10 = _this121.operation(_this121);
			var _this131 = t61.right;
			return tmp10 % _this131.operation(_this131);
		});
	} else {
		_g.h["%"] = function(t61) {
			var _this121 = t61.left;
			var tmp11 = _this121.operation(_this121);
			var _this131 = t61.right;
			return tmp11 % _this131.operation(_this131);
		};
	}
	if(__map_reserved["e"] != null) {
		_g.setReserved("e",function(t71) {
			return Math.exp(1);
		});
	} else {
		_g.h["e"] = function(t71) {
			return Math.exp(1);
		};
	}
	if(__map_reserved["pi"] != null) {
		_g.setReserved("pi",function(t81) {
			return Math.PI;
		});
	} else {
		_g.h["pi"] = function(t81) {
			return Math.PI;
		};
	}
	if(__map_reserved["abs"] != null) {
		_g.setReserved("abs",function(t91) {
			var _this141 = t91.left;
			return Math.abs(_this141.operation(_this141));
		});
	} else {
		_g.h["abs"] = function(t91) {
			var _this141 = t91.left;
			return Math.abs(_this141.operation(_this141));
		};
	}
	if(__map_reserved["ln"] != null) {
		_g.setReserved("ln",function(t101) {
			var _this151 = t101.left;
			return Math.log(_this151.operation(_this151));
		});
	} else {
		_g.h["ln"] = function(t101) {
			var _this151 = t101.left;
			return Math.log(_this151.operation(_this151));
		};
	}
	if(__map_reserved["sin"] != null) {
		_g.setReserved("sin",function(t111) {
			var _this161 = t111.left;
			return Math.sin(_this161.operation(_this161));
		});
	} else {
		_g.h["sin"] = function(t111) {
			var _this161 = t111.left;
			return Math.sin(_this161.operation(_this161));
		};
	}
	if(__map_reserved["cos"] != null) {
		_g.setReserved("cos",function(t121) {
			var _this171 = t121.left;
			return Math.cos(_this171.operation(_this171));
		});
	} else {
		_g.h["cos"] = function(t121) {
			var _this171 = t121.left;
			return Math.cos(_this171.operation(_this171));
		};
	}
	if(__map_reserved["tan"] != null) {
		_g.setReserved("tan",function(t131) {
			var _this181 = t131.left;
			return Math.tan(_this181.operation(_this181));
		});
	} else {
		_g.h["tan"] = function(t131) {
			var _this181 = t131.left;
			return Math.tan(_this181.operation(_this181));
		};
	}
	if(__map_reserved["cot"] != null) {
		_g.setReserved("cot",function(t141) {
			var _this191 = t141.left;
			return 1 / Math.tan(_this191.operation(_this191));
		});
	} else {
		_g.h["cot"] = function(t141) {
			var _this191 = t141.left;
			return 1 / Math.tan(_this191.operation(_this191));
		};
	}
	if(__map_reserved["asin"] != null) {
		_g.setReserved("asin",function(t151) {
			var _this201 = t151.left;
			return Math.asin(_this201.operation(_this201));
		});
	} else {
		_g.h["asin"] = function(t151) {
			var _this201 = t151.left;
			return Math.asin(_this201.operation(_this201));
		};
	}
	if(__map_reserved["acos"] != null) {
		_g.setReserved("acos",function(t161) {
			var _this211 = t161.left;
			return Math.acos(_this211.operation(_this211));
		});
	} else {
		_g.h["acos"] = function(t161) {
			var _this211 = t161.left;
			return Math.acos(_this211.operation(_this211));
		};
	}
	if(__map_reserved["atan"] != null) {
		_g.setReserved("atan",function(t171) {
			var _this221 = t171.left;
			return Math.atan(_this221.operation(_this221));
		});
	} else {
		_g.h["atan"] = function(t171) {
			var _this221 = t171.left;
			return Math.atan(_this221.operation(_this221));
		};
	}
	if(__map_reserved["atan2"] != null) {
		_g.setReserved("atan2",function(t181) {
			var _this231 = t181.left;
			var tmp12 = _this231.operation(_this231);
			var _this241 = t181.right;
			return Math.atan2(tmp12,_this241.operation(_this241));
		});
	} else {
		_g.h["atan2"] = function(t181) {
			var _this231 = t181.left;
			var tmp13 = _this231.operation(_this231);
			var _this241 = t181.right;
			return Math.atan2(tmp13,_this241.operation(_this241));
		};
	}
	if(__map_reserved["log"] != null) {
		_g.setReserved("log",function(t191) {
			var _this251 = t191.right;
			var tmp14 = Math.log(_this251.operation(_this251));
			var _this261 = t191.left;
			return tmp14 / Math.log(_this261.operation(_this261));
		});
	} else {
		_g.h["log"] = function(t191) {
			var _this251 = t191.right;
			var tmp15 = Math.log(_this251.operation(_this251));
			var _this261 = t191.left;
			return tmp15 / Math.log(_this261.operation(_this261));
		};
	}
	if(__map_reserved["max"] != null) {
		_g.setReserved("max",function(t201) {
			var _this271 = t201.left;
			var tmp16 = _this271.operation(_this271);
			var _this281 = t201.right;
			return Math.max(tmp16,_this281.operation(_this281));
		});
	} else {
		_g.h["max"] = function(t201) {
			var _this271 = t201.left;
			var tmp17 = _this271.operation(_this271);
			var _this281 = t201.right;
			return Math.max(tmp17,_this281.operation(_this281));
		};
	}
	if(__map_reserved["min"] != null) {
		_g.setReserved("min",function(t221) {
			var _this291 = t221.left;
			var tmp18 = _this291.operation(_this291);
			var _this301 = t221.right;
			return Math.min(tmp18,_this301.operation(_this301));
		});
	} else {
		_g.h["min"] = function(t221) {
			var _this291 = t221.left;
			var tmp19 = _this291.operation(_this291);
			var _this301 = t221.right;
			return Math.min(tmp19,_this301.operation(_this301));
		};
	}
	$r = _g;
	return $r;
}(this));
TermNode.twoSideOp_ = "^,/,*,-,+,%";
TermNode.constantOp_ = "e,pi";
TermNode.oneParamOp_ = "abs,ln,sin,cos,tan,cot,asin,acos,atan";
TermNode.twoParamOp_ = "atan2,log,max,min";
TermNode.twoSideOp = TermNode.twoSideOp_.split(",");
TermNode.constantOp = TermNode.constantOp_.split(",");
TermNode.oneParamOp = TermNode.oneParamOp_.split(",");
TermNode.twoParamOp = TermNode.twoParamOp_.split(",");
TermNode.precedence = (function($this) {
	var $r;
	var _g = new haxe_ds_StringMap();
	{
		var _g2 = 0;
		var _g1 = TermNode.twoSideOp.length;
		while(_g2 < _g1) {
			var i = _g2++;
			var key = TermNode.twoSideOp[i];
			if(__map_reserved[key] != null) {
				_g.setReserved(key,i);
			} else {
				_g.h[key] = i;
			}
		}
	}
	$r = _g;
	return $r;
}(this));
TermNode.clearSpacesReg = new EReg("\\s+","g");
TermNode.numberReg = new EReg("^([-+]?\\d+\\.?\\d*)","");
TermNode.paramReg = new EReg("^([a-z]+)","i");
TermNode.constantOpReg = new EReg("^(" + TermNode.constantOp.join("|") + ")\\(\\)","i");
TermNode.oneParamOpReg = new EReg("^(" + TermNode.oneParamOp.join("|") + ")\\(","i");
TermNode.twoParamOpReg = new EReg("^(" + TermNode.twoParamOp.join("|") + ")\\(","i");
TermNode.twoSideOpReg = new EReg("^(" + "\\" + TermNode.twoSideOp.join("|\\") + ")","");
TermNode.constantOpRegFull = new EReg("^(" + TermNode.constantOp.join("|") + ")$","i");
TermNode.oneParamOpRegFull = new EReg("^(" + TermNode.oneParamOp.join("|") + ")$","i");
TermNode.twoParamOpRegFull = new EReg("^(" + TermNode.twoParamOp.join("|") + ")$","i");
TermNode.twoSideOpRegFull = new EReg("^(" + "\\" + TermNode.twoSideOp.join("|\\") + ")$","");
TermNode.nameReg = new EReg("^([a-z]+)[:=]","i");
TermNode.nameRegFull = new EReg("^([a-z]+)$","i");
TermNode.noNeg = 1;
TermNode.forceFloat = 2;
TermNode.forcePow = 4;
TermNode.forceMod = 8;
TermNode.forceLog = 16;
TermNode.forceAtan = 32;
TermNode.forceConst = 64;
Main.formula = _$Formula_Formula_$Impl_$.fromString("x^2 + y^2");
haxe_ds_ObjectMap.count = 0;
js_Boot.__toStr = ({ }).toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
Main.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
